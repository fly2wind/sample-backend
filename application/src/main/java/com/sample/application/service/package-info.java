/**
 * --------------------------
 * DDD: application 应用层 （流程编排 事物控制 数据防腐）
 * --------------------------
 * 应用层定义系统的业务功能，并指挥领域层中的领域对象实现这些功能。
 * 分层:
 * application 对应了 DDD 中的「应用层」，同时也对应了 Clean Architecture 中的 Application Business Rule.
 * 作用:
 * 粗粒度的业务的入口，即 Use Case，这一层中不应该包含复杂的业务规则，而是对下层的 domain (领域层)进行协调，对业务逻辑进行编排。
 * 1. 应用层映射到系统用例模型，是系统用例模型在软件中的反映。
 * 2. 应用层接口描述了系统的全部功能，意味着系统用例模型中的所有用例都可以在应用层接口中找到对应的方法。
 * 3. 应用层实现类不实现业务逻辑，它通过排列组合领域层的领域对象来实现用例，它的职责可表示为“编排和转发”，即将它要实现的功能委托给一个或
 * 多个领域对象来实现，它本身只负责安排工作顺序和拼装操作结果。
 * <p>
 * <p>
 * UseCase（用例）用于承载应用场景和应用需求，以及其他Domain层无法承载的逻辑，例如：
 *
 * <ul>
 *     <li>应用需求的输入验证（业务需要的输入验证应放在Domain层中）</li>
 *     <li>依赖注入框架</li>
 *     <li>事务</li>
 *     <li>跨上下文或跨聚合调用</li>
 *     <li>其他应用层面的依赖</li>
 * </ul>
 **/
package com.sample.application.service;